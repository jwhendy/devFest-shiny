#+options: H:1

* Setup

#+BEGIN_MD
---
title       : An Introduction to =shiny=
subtitle    : 
author      : John Henderson
date        : 08 February 2014
job         : 
framework   : io2012        # {io2012, html5slides, shower, dzslides, ...}
highlighter : highlight.js  # {highlight.js, prettify, highlight}
hitheme     : tomorrow      # 
widgets     : []            # {mathjax, quiz, bootstrap}
mode        : selfcontained # {standalone, draft}
---
#+END_MD

#+md: ---

* Intro

- =shiny= is an =R= package that enables web based applications
- Overview of =shiny= basics
- Three examples
- The code/data necessary to reproduce anything in this talk is on [[https://github.com/jwhendy/devFest-shiny][github]]

#+md: ---
* Basics

- =shiny= works inside of [[http://www.rstudio.com/][RStudio]]
- Two files are required to run an application
  - =ui.R=: page format, user inputs, and outputs you're going to create
  - =server.R=: contains the R code which will generate your dynamic output

Don't forget to run =install.packages("shiny")=!

#+md: ---
* Minimal =ui.R= 

#+attr_ravel: eval=F
#+begin_src R :session r :results silent :exports code :eval no
library(shiny)
# page format
shinyUI(pageWithSidebar(
  # title
  headerPanel("Hello Shiny!"),

  sidebarPanel(
    # user inputs go here
  ),

  mainPanel(
    plotOutput("plot") # what you're going to output, e.g. a plot
  )
))

#+end_src

#+md: ---
* Minimal =server.R=

#+begin_src R :session r :results silent :exports code :eval no

library(shiny)

shinyServer(function(input, output) {

  # general R code here: load libraries, set variables/functions/etc.

  # output$name has to match ui.R's plotOutput("name")
  output$plot <- renderPlot({

    # code to make a plot goes here

  })
})

#+end_src

#+md: ---
* It works!

- After defining the above files...

#+begin_src R :session r :exports code :results silent :eval no
# run from within R studio
library(shiny)
setwd("/path/to/ui-and-server.R")
runApp()
#+end_src

#+begin_center
#+attr_html: :height 600
[[./img/shiny-template.png]]
#+end_center

#+md: ---
* Example: data analysis/exploration

- Enable rapid and dynamic switching of plot variables
- Allows for "plot prototyping" to examine trends/relationships
- Web-based solution is easily sharable with others

#+md: ---
* Fiddling with public transportation data

- Grabbed data on public transportation centers around US (more [[https://github.com/tcrug/public-transpo][here]])
- Some are quite efficient, some are horrible
- Can =shiny= help find some interesting tidbits?

\pause

[[http://jwhendy.shinyapps.io/transpo-exploration/][*Demo time!*]]

#+md: ---
* Example: interactive contour plots

- Applied machine learning in =R= on product test data
- Contour plots can be nice for visualizing effect of inputs vs. outputs
- How to share the results with co-workers who don't use =R=?

\pause

[[http://spark.rstudio.com/jwhendy/interactive-contour/][*Demo time!*]]

#+md: ---
* Example: visualizing insurance costs

- Benefit plan choices are tough!
- Started making visualizations/walkthroughs at 3M in 2011
- Goal: simplify decision process through visualization

#+md: ---
* The main issue

- HR typically sends you a table like this on glossy paper; which plan is best?

#+attr_latex: align=|l|l|l|
|-----------------+---------+---------|
|                 | Plan A  | Plan B  |
|-----------------+---------+---------|
| Premium         | $150/mo | $250/mo |
| 3M Contribution | $1,000  | $0      |
| Deductible      | $2,500  | $750    |
| $OOP_{max}$     | $5,000  | $4,000  |
|-----------------+---------+---------|

#+md: ---
* The main issue

- These employees are not smiling because they understood the table

#+begin_center
#+attr_latex: :height 5cm
[[./img/choosing-insurance.jpg]]
#+end_center

#+latex: \tiny
Image credit: http://jtsfs.com/employee-benefits-2/group-health-insurance/

#+md: ---
* In 2011, it was so simple!

#+begin_center
#+attr_latex: :height 6.5cm
[[./img/ins-intersections.pdf]]
#+end_center

#+md: ---
* Fast-foward to 2013
- 3M introduces split deductibles on two plans
- Now which plan is best?

#+latex: \footnotesize
| Plan | Premium | \(Ded_{ind}\) | \(Ded_{tot}\) | \(OOP_{ind}\) | \(OOP_{tot}\) | \(HSA\) |
|------+---------+---------------+---------------+---------------+---------------+---------|
| A    | $3,500  | $500          | $1,000        | $2,000        | $4,000        | -       |
| B    | $2,200  | -             | $2,750        | -             | $5,500        | $1,250  |
| C    | $600    | $2,750        | $5,500        | $5,500        | $11,000       | $1,250  |
#+latex: \normalsize

#+md: ---
* First shot

- Now we need axes for max spender vs. everyone else... contour plot!

#+begin_center
#+attr_latex: :height 5.5cm
[[./img/ins-contour.pdf]]
#+end_center

#+md: ---
* Winning cost map

- "Stack" the contours, figure out which one is lowest

#+begin_center
#+attr_latex: :height 5.5cm
[[./img/ins-cost-map.pdf]]
#+end_center

#+md: ---
* So, what about /this/ year?

- I used =shiny=, obviously!
- Dynamic UI elements for # of people on plan
- [[http://stackoverflow.com/questions/18116967/dealing-with-conditionals-in-a-better-manner-than-deeply-nested-ifelse-blocks]["Interesting" algorithm]] for dealing with complex criteria
- Hosted internally at 3M  with =shiny-server= 
- Put an anonymized version on [[http://spark.rstudio.com/jwhendy/insurance-visualizer][RStudio server]]

#+md: ---
* Table of possible outcomes

#+begin_center
#+latex: \tiny
#+name: binary_conversion
| ded_ind | oop_ind | ded_rem | oop_rem | ded_tot | oop_tot | bin | formula                                     |
|---------+---------+---------+---------+---------+---------+-----+---------------------------------------------|
|       0 |       0 |       0 |       0 |       0 |       0 |   0 | exp_ind + exp_rem                           |
|       1 |       0 |       0 |       0 |       0 |       0 |   1 | ded_ind + 0.1 (exp_ind - ded_ind) + exp_rem |
|       0 |       0 |       1 |       0 |       0 |       0 |   4 | exp_ind + exp_rem                           |
|       1 |       0 |       0 |       0 |       1 |       0 |  17 | ded_ind + 0.1 (exp_ind - ded_ind) + exp_rem |
|       1 |       1 |       0 |       0 |       1 |       0 |  19 | oop_ind + exp_rem                           |
|       0 |       0 |       1 |       0 |       1 |       0 |  20 | ded_tot + 0.1 (exp_ind + exp_rem - ded_tot) |
|       1 |       0 |       1 |       0 |       1 |       0 |  21 | ded_tot + 0.1 (exp_ind + exp_rem - ded_tot) |
|       1 |       1 |       1 |       0 |       1 |       0 |  23 | oop_ind + ded_ind + 0.1 (exp_rem - ded_ind) |
|       1 |       0 |       1 |       1 |       1 |       0 |  29 | ded_tot + 0.1 (exp_ind + exp_rem - ded_tot) |
|       1 |       1 |       0 |       0 |       1 |       1 |  51 | oop_ind + exp_rem                           |
|       1 |       1 |       1 |       0 |       1 |       1 |  55 | oop_ind + ded_ind + 0.1 (exp_rem - ded_ind) |
|       1 |       0 |       1 |       1 |       1 |       1 |  61 | oop_tot                                     |
|       1 |       1 |       1 |       1 |       1 |       1 |  63 | oop_tot                                     |
#+latex: \normalsize
#+end_center

#+md: ---
* Check against criteria; convert to binary

#+latex: \scriptsize
#+begin_example
  test_case <- c(rep(c(exp_ind, exp_rem, exp_ind + exp_rem),   # vector of predicted costs
                     each = 2))                                # for max vs. others

  test_case <- rbind(test_case, test_case, test_case)          # three sets for three plans
  
  limits <- cbind(compare$ded_ind, compare$exp_max_ind,        # criteria values
                  compare$ded_ind, compare$exp_max_ind, 
                  compare$ded_tot, compare$exp_max_tot)
  
  result <- cbind(compare[, c("ded_ind", "ded_tot", "oop_ind", # store cutoffs in result
                              "oop_tot", "prem", "hsa")],
                  exp_ind, exp_rem,
                  (test_case > limits) %*% (2^(0:5)))          # convert T/F to binary
#+end_example
#+latex: \normalsize

#+md: ---
* Hacky function lookup

#+latex: \tiny
#+begin_example
map_funcs <- list(
  "0" = function(binary) { binary$exp_ind + binary$exp_rem }, 
  "1" = function(binary) { binary$ded_ind + (0.1* (binary$exp_ind - binary$ded_ind)) + binary$exp_rem }, 
  "4" = function(binary) { binary$exp_ind + binary$exp_rem }, 
  "16" = function(binary) { binary$ded_tot + (0.1 * (binary$exp_ind + binary$exp_rem - binary$ded_tot)) },
  "17" = function(binary) { binary$ded_ind + (0.1* (binary$exp_ind - binary$ded_ind)) + binary$exp_rem },
  "19" = function(binary) { binary$oop_ind + binary$exp_rem }, 
  "20" = function(binary) { binary$ded_tot + (0.1 * (binary$exp_ind + binary$exp_rem - binary$ded_tot)) }, 
  "21" = function(binary) { binary$ded_tot + (0.1 * (binary$exp_ind + binary$exp_rem - binary$ded_tot)) }, 
  "23" = function(binary) { binary$oop_ind + binary$ded_ind + (0.1 * (binary$exp_rem - binary$ded_ind)) },
  "28" = function(binary) { binary$ded_tot + (0.1 * (binary$exp_ind + binary$exp_rem - binary$ded_tot)) },
  "29" = function(binary) { binary$ded_tot + (0.1 * (binary$exp_ind + binary$exp_rem - binary$ded_tot)) },
  "48" = function(binary) { binary$oop_tot },   
  "51" = function(binary) { binary$oop_ind + binary$exp_rem }, 
  "55" = function(binary) { binary$oop_ind + binary$ded_ind + (0.1 * (binary$exp_rem - binary$ded_ind)) }, 
  "60" = function(binary) { binary$oop_tot }, 
  "61" = function(binary) { binary$oop_tot }, 
  "63" = function(binary) { binary$oop_tot }
)
#+end_example
#+latex: \normalsize

#+md: ---
* 

\vfill
#+begin_center
'Nuff talk, let's take a [[http://spark.rstudio.com/jwhendy/insurance-visualizer][look]]!
#+end_center
\vfill

#+md: ---
* Sharing =shiny= apps

- Method 1: tar/zip all files, send, have user run locally
- Method 2: install [[http://www.rstudio.com/shiny/server/][shiny-server]] on local machine

- Method 3: request account for RStudio server account (still available?)
  - Create/upload files; http://spark.rstudio.com/uname/appName

- Method 4: request account on /new/ RStudio server [[http://www.shinyapps.io/signup.html][here]]
  - Create apps locally, then follow [[https://github.com/rstudio/shinyapps/][shinyapps]] instructions
  - When satisfied, just run =deployApp()=!
  - Visit app at http://uname.shinyapps.io/appName/

#+md: ---
* References

- [[http://www.rstudio.com/shiny/][Getting started]] with =shiny= 
- =shiny= [[https://groups.google.com/forum/#!forum/shiny-discuss][mailing list]]
- RStudio server [[https://shinyapps.io/][application]]
- [[http://stackoverflow.com/questions/19130455/create-dynamic-number-of-input-elements-with-r-shiny][SO question]] on creating dymanic input elements
- [[http://stackoverflow.com/questions/17683933/set-global-object-in-shiny][SO question]] on global variables (not intuitive!)
- [[http://stackoverflow.com/questions/17838709/scale-and-size-of-plot-in-rstudio-shiny][SO question]] on sizing plots in =shiny=
- [[http://stackoverflow.com/questions/17958730/faceting-a-set-of-contour-plots-in-ggplot-r][SO question]] that solved my contour plot issue; repaid with =shiny= example

#+md: ---
* Apps in this presentation
- Transpo exploration: [[http://spark.rstudio.com/jwhendy/transpo-exploration/][spark.rstudio]] or [[http://jwhendy.shinyapps.io/transpo-exploration][shinyapps.io]]
- [[http://spark.rstudio.com/jwhendy/interactive-contour/][Interactive contour]]
- [[http://spark.rstudio.com/jwhendy/insurance-visualizer/][Benefit analysis]]
- Everything's also on [[https://github.com/jwhendy/devFest-shiny][github]]!
